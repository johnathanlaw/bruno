meta {
  name: create-or-update-application-instance
  type: http
  seq: 2
}

put {
  url: {{baseUrl}}/public/self-serve/v1/application-instance?dryMode=false
  body: json
  auth: bearer
}

params:query {
  dryMode: false
}

headers {
  Content-Type: application/json
  Accept: application/json
}

auth:bearer {
  token: {{bearerToken}}
}

body:json {
  {
    "apiVersion": "<string>",
    "kind": "<string>",
    "metadata": {
      "name": "<string>",
      "application": "<string>"
    },
    "spec": {
      "cluster": "<string>",
      "topicPolicyRef": [
        "<string>",
        "<string>"
      ],
      "resources": [
        {
          "type": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "name": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "patternType": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "connectCluster": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "ownershipMode": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          }
        },
        {
          "type": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "name": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "patternType": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "connectCluster": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          },
          "ownershipMode": {
            "value": "<Error: Too many levels of nesting to fake this schema>"
          }
        }
      ],
      "applicationManagedServiceAccount": "<boolean>",
      "serviceAccount": "<string>",
      "defaultCatalogVisibility": "<string>"
    }
  }
}

docs {
  Create or update a ApplicationInstance
}
